import os
import asyncio
import logging
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –ª–æ–≥–≥–µ—Ä
from user_logger import (
    log_command, 
    log_text_message, 
    log_unknown_command,
    log_bot_start,
    log_bot_stop,
    log_bot_error
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def bot_start_handler(message: Message):
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
        log_command(message, "/start")
        
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –ü–æ—Å–º–æ—Ç—Ä–∏ –º–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏ /help")
        print("–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start")
        
    except Exception as e:
        log_bot_error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /start: {e}", message.from_user.id)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message(Command("help"))
async def bot_help_handler(message: Message):
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
        log_command(message, "/help")
        
        await message.answer(
            "–ò–∑–≤–µ—Å—Ç–Ω—ã–µ –º–Ω–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/help - –ø–æ–º–æ—â—å\n"
            "/start - –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
            "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ–≥–æ–≤ (–¥–ª—è –∞–¥–º–∏–Ω–∞)\n"
        )
        print("–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /help")
        
    except Exception as e:
        log_bot_error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /help: {e}", message.from_user.id)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats (–¥–ª—è –∞–¥–º–∏–Ω–∞)
@dp.message(Command("stats"))
async def bot_stats_handler(message: Message):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π ID)
        ADMIN_ID = 123456789  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π Telegram ID
        
        if message.from_user.id != ADMIN_ID:
            log_command(message, "/stats")
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
        log_command(message, "/stats")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        from user_logger import user_logger
        
        stats = user_logger.get_logs_statistics()
        
        if stats:
            stats_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ–≥–æ–≤:\n\n"
            for filename, info in stats.items():
                stats_text += f"üìÑ {filename}\n"
                stats_text += f"   –†–∞–∑–º–µ—Ä: {info['size_mb']} MB\n"
                stats_text += f"   –ò–∑–º–µ–Ω–µ–Ω: {info['modified']}\n\n"
        else:
            stats_text = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ–≥–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
        
        await message.answer(stats_text)
        
    except Exception as e:
        log_bot_error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /stats: {e}", message.from_user.id)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def unknown_handler(message: Message):
    try:
        if message.text.startswith('/'):
            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É
            log_unknown_command(message, message.text)
            unknown_reply = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤ /help"
        else:
            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            log_text_message(message, message.text)
            unknown_reply = "–Ø –ø–æ–∫–∞ –Ω–µ –æ—Ç–≤–µ—á–∞—é –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤ /help"
        
        await message.answer(unknown_reply)
        print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
        
    except Exception as e:
        log_bot_error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}", 
                     message.from_user.id if message.from_user else None)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
        log_bot_start()
        print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥
        await dp.start_polling(bot)
        
    except Exception as e:
        log_bot_error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
    finally:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É –±–æ—Ç–∞
        log_bot_stop()
        print('–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')

if __name__ == "__main__":
    asyncio.run(main())