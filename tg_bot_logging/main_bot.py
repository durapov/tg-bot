import os
import asyncio
import logging
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
from user_logger import (
    log_command, 
    log_text_message, 
    log_unknown_command,
    log_bot_started,
    log_bot_stopped,
    log_error,
    get_stats
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))  # ID –∞–¥–º–∏–Ω–∞ –∏–∑ .env

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–∞–∑–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


@dp.message(Command("start"))
async def start_handler(message: Message):
    log_command(message, "/start")
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ü–æ—Å–º–æ—Ç—Ä–∏ –º–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏ /help")


@dp.message(Command("help"))
async def help_handler(message: Message):
    log_command(message, "/help")
    await message.answer(
        "–ò–∑–≤–µ—Å—Ç–Ω—ã–µ –º–Ω–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/help - –ø–æ–º–æ—â—å\n"
        "/start - –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)\n"
    )


@dp.message(Command("stats"))
async def stats_handler(message: Message):
    log_command(message, "/stats")
    
    if message.from_user.id != ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        stats = get_stats()
        if stats:
            stats_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ–≥–æ–≤:\n\n"
            for filename, info in stats.items():
                stats_text += f"üìÑ {filename}\n"
                stats_text += f"   –†–∞–∑–º–µ—Ä: {info['size_mb']} MB\n"
                stats_text += f"   –ò–∑–º–µ–Ω–µ–Ω: {info['modified'][:19]}\n\n"
            await message.answer(stats_text)
        else:
            await message.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", message.from_user.id)
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")


@dp.message()
async def unknown_handler(message: Message):
    if message.text.startswith('/'):
        log_unknown_command(message)
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤ /help")
    else:
        log_text_message(message)
        await message.answer("–Ø –ø–æ–∫–∞ –Ω–µ –æ—Ç–≤–µ—á–∞—é –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã.")


async def main():
    try:
        log_bot_started()
        print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')
        await dp.start_polling(bot)
    except Exception as e:
        log_error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        log_bot_stopped()


if __name__ == "__main__":
    asyncio.run(main())